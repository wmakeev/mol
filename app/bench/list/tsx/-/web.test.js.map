{"version":3,"sources":["../../../../../test/test.ts","../../../../../test/test.web.ts","../../../../../assert/assert.test.ts","../../../../../assert/assert.ts","../../../../../dom/make/make.test.ts","../../../../../object/object.test.ts","../../../../../dom/jsx/jsx.test.tsx"],"names":[],"mappings":"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","file":"web.test.js","sourcesContent":["namespace $ {\n\t\n\texport function $mol_test( set : { [ name : string ] : string | ( ()=> void ) } ) {\n\t\tfor( let name in set ) $mol_test_all.push( new $mol_test_case( set[ name ] ) )\n\t}\n\t\n\texport var $mol_test_all : $mol_test_case[] = []\n\t\n\texport var $mol_test_run = () => {\n\t\tfor( var test of $mol_test_all ) {\n\t\t\ttest.run()\n\t\t}\n\t}\n\t\n\texport class $mol_test_case {\n\t\t\n\t\tcode : ()=> void\n\t\t\n\t\tconstructor( code : string | ( ()=> void ) ) {\n\t\t\tif( typeof code === 'string' ) {\n\t\t\t\tthis.code = <any> new Function( code )\n\t\t\t} else {\n\t\t\t\tthis.code = code\n\t\t\t}\n\t\t}\n\t\t\n\t\trun() {\n\t\t\tthis.code()\n\t\t}\n\t\t\n\t}\n\t\n}\n","/// Autostart tests after all scripts load\nwindow.addEventListener( 'load' , event => {\n\t$.$mol_test_run()\n} )\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'must be false'() {\n\t\t\t$mol_assert_not( 0 )\n\t\t} ,\n\t\t\n\t\t'must be true'() {\n\t\t\t$mol_assert_ok( 1 )\n\t\t} ,\n\t\t\n\t\t'must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t\n\texport function $mol_assert_ok( value : any ) {\n\t\tif( value ) return\n\t\tthrow new Error( `Not true (${value})` )\n\t}\n\t\n\texport function $mol_assert_not( value : any ) {\n\t\tif( !value ) return\n\t\tthrow new Error( `Not false (${value})` )\n\t}\n\t\n\texport function $mol_assert_fail( handler : ()=> any , ErrorRight? : any ) {\n\t\ttry {\n\t\t\thandler()\n\t\t} catch( error ) {\n\t\t\tif( ErrorRight ) $mol_assert_ok( error instanceof ErrorRight )\n\t\t\treturn error\n\t\t}\n\t\tthrow new Error( 'Not failed' )\n\t}\n\t\n\texport function $mol_assert_equal< Value >( a : Value , b : Value ) {\n\t\tif( a === b ) return\n\t\tthrow new Error( `Not equal (${a},${b})` )\n\t}\n\t\n\texport function $mol_assert_unique< Value >( a : Value , b : Value ) {\n\t\tif( a !== b ) return\n\t\tthrow new Error( `Not unique (${a},${b})` )\n\t}\n\t\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Make html:span'() {\n\t\t\tconst dom = $mol_dom_make( '$mol_dom_make_test' ) as HTMLSpanElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<span id=\"$mol_dom_make_test\"></span>' )\n\t\t} ,\n\t\t\n\t\t'Make svg:svg'() {\n\t\t\tconst dom = $mol_dom_make( '$mol_dom_make_test' , 'svg' , 'http://www.w3.org/2000/svg' )\n\t\t\t\n\t\t\t$mol_assert_equal( ( dom as HTMLElement ).outerHTML , '<svg id=\"$mol_dom_make_test\"></svg>' )\n\t\t\t//$mol_assert_equal( ( dom as SVGSVGElement ).viewBox.baseVal.width , 0 ) // https://github.com/tmpvar/jsdom/pull/1445\n\t\t} ,\n\t\t\n\t\t'Make to exists element'() {\n\t\t\tconst body = $mol_dom_context.document.body\n\t\t\t\n\t\t\tconst dom = $mol_dom_make( '$mol_dom_make_test' ) as HTMLSpanElement\n\t\t\t\n\t\t\ttry {\n\t\t\t\tbody.appendChild( dom )\n\t\t\t\t$mol_assert_equal( dom , $mol_dom_make( '$mol_dom_make_test' ) )\n\t\t\t} finally {\n\t\t\t\tbody.removeChild( dom )\n\t\t\t}\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'init with overload'() {\n\t\t\tclass X extends $mol_object {\n\t\t\t\tfoo() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = X.make({\n\t\t\t\tfoo : ()=> 2 ,\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo() , 2 )\n\t\t} ,\n\t\t\n\t\t'object path generation'() {\n\t\t\tvar x = new $mol_object\n\t\t\t\n\t\t\t$mol_assert_equal( `${ x }` , '' )\n\t\t\t\n\t\t\tx.object_field( 'foo()' )\n\t\t\t$mol_assert_equal( `${ x }` , '.foo()' )\n\t\t\t\n\t\t\tx.object_field( 'bar()' )\n\t\t\t$mol_assert_equal( `${ x }` , '.foo()' )\n\t\t} ,\n\t\n\t} )\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Make empty div'() {\n\t\t\t$mol_assert_equal( (<div/>).outerHTML , '<div></div>' )\n\t\t} ,\n\t\t\n\t\t'Make input with id and value'() {\n\t\t\tconst dom = <input id=\"$mol_dom_make_test\" value={ 123 } /> as HTMLInputElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML , '<input id=\"$mol_dom_make_test\">' )\n\t\t\t$mol_assert_equal( dom.value , '123' )\n\t\t} ,\n\t\t\n\t\t'Make content'() {\n\t\t\tconst id = '$mol_dom_make_test'\n\t\t\t\n\t\t\tconst dom =\n\t\t\t\t<div>\n\t\t\t\t\thello\n\t\t\t\t\t<strong>world</strong>\n\t\t\t\t\t!\n\t\t\t\t</div>\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tdom.outerHTML ,\n\t\t\t\t'<div>' +\n\t\t\t\t\t'hello' +\n\t\t\t\t\t'<strong>world</strong>' +\n\t\t\t\t\t'!' +\n\t\t\t\t'</div>'\n\t\t\t)\n\t\t} ,\n\t\t'Make to exists element'() {\n\t\t\tconst dom1 = <div id=\"$mol_dom_make_test\" />\n\t\t\t$mol_dom_context.document.body.appendChild( dom1 )\n\t\t\t\n\t\t\tconst dom2 = <div id=\"$mol_dom_make_test\">hello</div>\n\t\t\t$mol_dom_context.document.body.removeChild( dom1 )\n\t\t\t\n\t\t\t$mol_assert_equal( dom1 , dom2 )\n\t\t\t$mol_assert_equal( dom1.outerHTML , '<div id=\"$mol_dom_make_test\">hello</div>' )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n"]}